Лабораториска вежба 2 - за групите со префикс Б

Спецификација за лабораториската вежба
Во оваа вежба ќе треба да продолжите со работа во рамки на проектот од претходната лабораториска вежба.

1. Во класата Course направете промена за својтството id, т.ш. ќе го генерирате за секој нов курс, како што е направено во рамки на аудиториската вежба.
2. Додадете класа Teacher во рамки на пакетот mk.ukim.finki.wp.lab.model. Во истата ќе чувате:
private Long id
private String name
private String surname

3.Во класата Course додадете го професорот како посебно својство.

4.Креирајте TeacherRepository класа во пакетот mk.ukim.finki.wp.lab.repository, и во неа иницијализирајте листа во која ќе има 5 професори. 
  Во рамки на класата напишете и метод public List<Teacher> findAll() кој ги враќа сите професори.
  
5.Во рамки на пакетот mk.ukim.finki.wp.lab.service креирајте интерфејс TeacherService како и класа која го имплементира TeacherServiceImpl (во impl подпакетот). 
  Нека во овој сервис се креира метод public List<Teacher> findAll() кој го повикува соодветниот метод од TeacherRepository.
  
6. Дефинирајте пакет mk.ukim.finki.wp.lab.web.controller и во него креирајте ја CourseController класата.

  Имплементирајте метод public String getCoursesPage(@RequestParam(required = false) String error, Model model) кој само треба да го прикаже погледот на сите курсеви.
  Нека одговара на mapping /courses. Погледот на сите балони нека биде listCourses.html, со тоа што во него ќе ги направите потребните промени, притоа оставајќи ја функционалноста на избирање на курс и навигирање кон следната страна за додавање на студенти. 
  Дополнително, направете и промена во филтерот, со цел да сега повторно ова е почетната страна во рамки на апликацијата.
  Имплементирајте метод public String saveCourse() кој како request параметри ќе ги прими името, описот за курсот, 
  како и id на професорот кој е одговорен за тој курс. Нека одговара на mapping /courses/add, и при успешно додаден или едитиран курс нека редиректира кон погледот со сите курсеви.
  Имплементирајте метод public String deleteCourse(@PathVariable Long id). Нека одговара на mapping /courses/delete/{id}, и при успешно избришан курс од листата повторно нека ја прикажува листата со курсеви.
  
7. Внимавајте како ќе бидат анотирани методите од барањето 7, зависно нивната функционалнст.

8. Имајќи ги предвид методите на web слојот кои треба да ги имплементирате, креирајте ги сите потребни методи во рамки на сервисниот слој.

9.Имајќи ги предвид методите на service слојот кои треба да ги имплементирате, креирајте ги сите потребни методи во рамки на repository слојот.

10.Креирајте страна add-course.html, која треба да прикажува форма за додавање на нов курс. Истата форма би требало да се употреби и за едитирање на курс, при што за еден курс може да ги менуваме само името, описот и професорот (за ова може да искористите готов html template или пак оној од проектот од аудиториски вежби, при што соодветно ќе го прилагодите). Дополнително, имајте предвид дека за професорот би имале <select> таг, односно ќе може да избираме од сите професори.

11. Во рамки на listCourses.html, додадете копчe за бришење на курс и копче за едитирање на курс (во рамки на секој item во листата). Дополнително, додадете копче за додавање на нов курс кон листата (слично како што се прави во рамки на аудиториската вежба).

12. До овој момент треба да имате целосна функционалност на прикажување на сите курсеви во листата, како и бришење на еден курс од истата. Повторно, потребно е да ја надополните CourseController класата.

  	Имплементирајте метод public String getEditCoursePage(), кој одговара на mapping /courses/edit-form/{id}. Направете ги сите потребни промени во дефиницијата на методот за да го овозможите ова. Овој метод треба да ја прикаже add-course.html страната. Кога едитираме курс, потребно е во рамки на формата да се прикажуваат неговите моментални податоци (слично како во проектот од аудиториската вежба). Дополнително, доколку се пристапи патеката /courses/edit-form/{id}, со id за кое нема курс во рамки на листата, нека се направи редирект кон листата со курсеви, при што ќе се прикаже и порака за грешка.
    Имплементирајте метод public String getAddCoursePage(), кој одговара на mapping /courses/add-form и ја прикажува add-course.html страната.

13.Формата која се наоѓа на add-course.html страната, ќе прави POST барање кон CourseController, со што ќе овозможите креирање на нов курс или пак едитирање на курс.

14.Доколку при имплементацијата на вежбата има потреба од дополнителни методи во рамки на сервисниот или repository слојот, додадете ги (пр. метод за пребарување на курс или професор според id).

15.Дополнително, сите курсеви на почетната страна нека се прикажуваат сортирани според името и да не се дозволува додавање на два курсеви со исто име.


При тестирање проверете:
дали успешно ја прикажувате листата со курсеви
дали можете да креирате нов курс, да едитирате курс и да избришете курс
дали работат функционалностите од претходната вежба, односно успешно стигате до последната страна каде се прикажани студентите во рамки на курсот
